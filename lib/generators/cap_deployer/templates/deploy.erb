require 'bundler/capistrano'

set :application, '<%= application_name %>'

set :repository, '<%= @arg['repo'] %>'

default_run_options[:pty] = true
set :rails_env, 'production'

set :scm, :git
# Or: `accurev`, `bzr`, `cvs`, `darcs`, `git`, `mercurial`, `perforce`, `subversion` or `none`

set :user, 'deploy'
set :use_sudo, false
set :deploy_to, "/home/#{user}/apps/#{application}/#{rails_env}"

set server_domain, '<%= @arg['server_domain'] %>'

role :web, server_domain                          # Your HTTP server, Apache/etc
role :app, server_domain                          # This may be the same as your `Web` server
role :db,  server_domain, :primary => true        # This is where Rails migrations will run
role :db,  server_domain

# if you want to clean up old releases on each deploy uncomment this:
# after "deploy:restart", "deploy:cleanup"

# if you're still using the script/reaper helper you will need
# these http://github.com/rails/irs_process_scripts

# If you are using Passenger mod_rails uncomment this:
# namespace :deploy do
#   task :start do ; end
#   task :stop do ; end
#   task :restart, :roles => :app, :except => { :no_release => true } do
#     run "#{try_sudo} touch #{File.join(current_path,'tmp','restart.txt')}"
#   end
# end
#

namespace :db do
  desc <<-EOF
    Prepare DB base on your config/database.yml, include creating the db_user and db, granting db_user all db's privileges.

    Your need to input DB root password to make sure the permission to configure your DB in server.

    DB environment is depend on rails_env which in your deploy.rb file.
    if set :rails_env, 'production',
    then run `cap db:perpare` will prepare production DB base on database.yml
  EOF

  task :prepare do
    set :env, YAML.load(capture(%Q(cd #{deploy_to}/current/ && cat config/database.yml)))[rails_env]
    set :db_name, env['database']
    set :db_user, env['username']
    set :db_password, (env['password'] || "")

    puts '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'
    puts 'db_name is: ' + db_name
    puts 'db_user is: ' + db_user
    puts 'user_password is: ' + db_password
    puts '<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<'

    set :continue, Capistrano::CLI.ui.ask('Do you want to go on:(y/n): ')

    if db_user == 'root'
      puts "Your are using root account in your database.yml !!!"
      set :continue, 'n'
    end


    if continue.downcase == 'y'
      set :db_root_password, Capistrano::CLI.password_prompt("Enter MySQL database root password: ")
      puts capture(%Q(mysql -u root --password='#{db_root_password}' -e "
                    create database #{db_name} default character set utf8;
                    create user #{db_user} identified by '#{db_password}';
                    grant all privileges on #{db_name}.* to #{db_user};
                    show grants for #{db_user};").gsub("\n",""))
      puts 'DB prepare finished......'
    else
      puts 'DB prepare Exit......'
    end
  end
end
